/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API health check
         * @description Returns the API status and uptime
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all available F1 seasons from 2005 onwards
         * @description Returns a list of F1 seasons with their IDs and wiki URLs
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of F1 seasons */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SeasonsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/seasons/{seasonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a specific F1 season
         * @description Returns all the races in a specific F1 season
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the F1 season (e.g., 2020) */
                    seasonId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Details of the specified F1 season */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RacesResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Season not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /** @example ok */
            status: string;
            /**
             * @description Time in seconds since the API started
             * @example 123.456
             */
            uptime: number;
        };
        Season: {
            /** @example 12 */
            id: number;
            /** @example 2020 */
            year: string;
            /**
             * Format: uri
             * @example https://en.wikipedia.org/wiki/2020_Formula_One_World_Championship
             */
            url: string;
        };
        SeasonsResponse: components["schemas"]["Season"][];
        Driver: {
            /** @example hamilton */
            id: string;
            /** @example Lewis */
            givenName: string;
            /** @example Hamilton */
            familyName: string;
            /** @example true */
            isSeasonChampion: boolean;
        };
        Race: {
            /** @example 1 */
            id: number;
            /** @example Bahrain Grand Prix */
            name: string;
            /**
             * Format: date
             * @example 2020-12-13T00:00:00Z
             */
            date: string;
            /** @example 2020 */
            season: number;
            /** @example {
             *       "id": "hamilton",
             *       "givenName": "Lewis",
             *       "familyName": "Hamilton",
             *       "isSeasonChampion": true
             *     } */
            driver: components["schemas"]["Driver"];
        };
        RacesResponse: components["schemas"]["Race"][];
        ErrorResponse: {
            /** @example An error occurred */
            error: string;
            /** @example Detailed error message */
            message?: string;
            /** @example 500 */
            code?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
